require 'active_mocker/mock_requires'
Object.send(:remove_const, "<%= class_name %>") if ActiveMocker.class_exists?("<%= class_name %>")

class <%= class_name %> < ::ActiveHash::Base
  include ActiveMocker::ActiveHash::ARApi
  include ActiveMocker::MockInstanceMethods
  extend  ActiveMocker::MockClassMethods

  def initialize(attributes={}, &block)
    @attributes = HashWithIndifferentAccess.new(<%= default_attributes %>)
    super(attributes, &block)
  end


  def self.column_names
    <%= attribute_names %>
  end

  def self.attribute_names
    @attribute_names = <%= attribute_names %>
  end

  ##################################
  #   Attributes getter/setters    #
  ##################################
<% attributes.each do |meth| %>
  def <%= meth.name %>
    @attributes['<%= meth.name %>']
  end

  def <%= meth.name %>=(val)
    type = (types[:<%= meth.name %>] ||= Virtus::Attribute.build(<%= meth.type %>))
    @attributes['<%= meth.name %>'] = type.coerce(val)
    <% association = belongs_to.select{|r| r.foreign_key == meth.name}.first  -%>
    <% if association -%>
    <% klass = "#{association.class_name}Mock" -%>
    associations['<%= association.name %>'] = <%= klass %>.find(val) if defined? <%= klass %>
    <% end -%>
  end
<% end %>
  ##################################
  #         Associations           #
  ##################################
# belongs_to
<% belongs_to.each do |meth| %>
  def <%= meth.name %>
    associations['<%= meth.name %>']
  end

  def <%= meth.name %>=(val)
    associations['<%= meth.name %>'] = val
    write_attribute('<%= meth.foreign_key %>', val.id) if val.persisted?
  end
<% end -%>
# has_one
<% has_one.each do |meth| %>
  def <%= meth.name %>
    associations['<%= meth.name %>']
  end

  def <%= meth.name %>=(val)
    associations['<%= meth.name %>'] = val
  end
<% end -%>
# has_many
<% has_many.each do |meth| %>
  def <%= meth.name %>
    associations['<%= meth.name %>'] ||= ActiveMocker::Collection::Association.new
  end

  def <%= meth.name %>=(val)
    associations['<%= meth.name %>'] = ActiveMocker::Collection::Association.new(val)
  end
<% end -%>
# has_and_belongs_to_many
<% has_and_belongs_to_many.each do |meth| %>
  def <%= meth.name %>
    associations['<%= meth.name %>'] ||= ActiveMocker::Collection::Association.new
  end

  def <%= meth.name %>=(val)
    associations['<%= meth.name %>'] = val
  end
<% end -%>

  ##################################
  #  Model Methods getter/setters  #
  ##################################

  def self.model_instance_methods
    @model_instance_methods ||= <%= model_instance_methods %>
  end

  def self.model_class_methods
    @model_class_methods ||= <%= model_class_methods %>
  end

  def self.clear_mock
    @foreign_keys,@model_class_methods, @model_instance_methods = nil, nil, nil
    delete_all
  end
<% instance_methods.each do |method| %>
  def <%= method.method %>(<%= method.params %>)
    block =  model_instance_methods['<%= method.method %>']
    self.class.is_implemented(block, '#<%= method.method %>')
    instance_exec(*[<%= method.params_pass %>], &block)
  end
<% end -%>
<% class_methods.each do |method| %>
  def self.<%= method.method %>(<%= method.params %>)
    block =  model_class_methods['<%= method.method %>']
    is_implemented(block, '::<%= method.method %>')
    instance_exec(*[<%= method.params_pass %>], &block)
  end
<% end -%>

end
