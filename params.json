{"name":"Active mocker","tagline":"Create mocks from active record models without loading rails or running a database.","body":"# ActiveMocker\r\n[![Gem Version](https://badge.fury.io/rb/active_mocker.svg)](http://badge.fury.io/rb/active_mocker)\r\n[![Build Status](https://travis-ci.org/zeisler/active_mocker.png?branch=master)](https://travis-ci.org/zeisler/active_mocker)\r\n[![Code Climate](https://codeclimate.com/github/zeisler/active_mocker.png)](https://codeclimate.com/github/zeisler/active_mocker)\r\n[![Dependency Status](https://gemnasium.com/zeisler/active_mocker.svg)](https://gemnasium.com/zeisler/active_mocker)\r\n[![Gitter chat](https://badges.gitter.im/zeisler/active_mocker.png)](https://gitter.im/zeisler/active_mocker)\r\n\r\nActiveMocker creates mocks classes from ActiveRecord models. Allowing your test suite to run very fast by not loading Rails or hooking to a database. It parses the schema.rb and the defined methods on a model then generates a ruby file that can be included within a test. The mock file can be run by themselves and come with a partial implementation of ActiveRecord. Attributes and associations can be used just the same as in ActiveRecord. Methods will have the correct arguments but raise an Unimplemented error when called. Mocks are regenerated when the schema is modified so your mocks will not go stale; preventing the case where your units tests pass but production code fails.\r\n\r\nExamples from a real apps\r\n\r\n\t\tFinished in 0.54599 seconds\r\n\t\t190 examples, 0 failures\r\n\t\t\r\n------\r\n\t\t\r\n\t\tFinished in 1 seconds\r\n\t\t374 examples, 0 failures\r\n\r\n\r\n------------------------------------------\r\n\r\n* [Documentation](#documentation)\r\n* [Contact](#contact)\r\n* [Installation](#installation)\r\n* [Setup](#setup)\r\n  * [Generate](#generate_mocks)\r\n* [Dependencies](#dependencies)\r\n* [Usage](#usage)\r\n* [Mocking Methods](#mocking-methods)\r\n* [Managing Mocks](#managing-mocks)\r\n* [ActiveRecord supported methods](#activerecord-supported-methods)\r\n* [Known Limitations](#known-limitations)\r\n* [Inspiration](#inspiration)\r\n* [Contributing](#contributing)\r\n\r\n\r\n---------------------------\r\n\r\n## Documentation [![Inline docs](http://inch-ci.org/github/zeisler/active_mocker.png?branch=master)](http://inch-ci.org/github/zeisler/active_mocker)\r\n\r\n[rdoc](http://rdoc.info/github/zeisler/active_mocker/master/ActiveMocker)\r\n\r\n------------------------------------------\r\n\r\n## Contact\r\n\r\nAsk a question in the [chat room](https://gitter.im/zeisler/active_mocker).\r\n\r\n------------------------\r\n\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'active_mocker'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install active_mocker\r\n\r\n## Dependencies\r\n* Tested with Rails 4.1 may work with older versions but not supported.\r\n* Requires Ruby MRI =< 2.1.\r\n\r\n\r\n## Setup\r\n\r\n\r\n  See [example_rails_app](https://github.com/zeisler/active_mocker/tree/master/example_rails_app) for complete setup.\r\n\r\n\r\n### Generate Mocks\r\n\r\nRunning this rake task builds/rebuilds the mocks. It will be ran automatically after every schema modification. If the model changes this rake task needs to be called manually. You could add a file watcher for when your models change and have it run the rake task.\r\n\r\n    rake active_mocker:build\r\n\r\n## Usage\r\n\r\n    #db/schema.rb\r\n\r\n    ActiveRecord::Schema.define(version: 20140327205359) do\r\n\r\n      create_table \"people\", force: true do |t|\r\n        t.integer  \"account_id\"\r\n        t.string   \"first_name\",        limit: 128\r\n        t.string   \"last_name\",         limit: 128\r\n        t.string   \"address\",           limit: 200\r\n        t.string   \"city\",              limit: 100\r\n      end\r\n\r\n    end\r\n--------------\r\n\r\n    #app/models/person.rb\r\n\r\n    class Person < ActiveRecord::Base\r\n      belongs_to :account\r\n\r\n      def bar(name, type=nil)\r\n        puts name\r\n      end\r\n\r\n      def self.bar\r\n      end\r\n\r\n    end\r\n \r\n----------------- \r\n  \r\n### Using With Rspec, --tag active_mocker:true\r\n\r\n    require 'rspec'\r\n    require 'active_mocker/rspec_helper'\r\n    require 'spec/mocks/person_mock'\r\n    require 'spec/mocks/account_mock'\r\n        \r\n    describe 'Example', active_mocker:true do\r\n    \r\n       before do\r\n          Person.create # stubbed for PersonMock.create\r\n       end\r\n    \r\n    end\r\n       \r\n----------\r\n\r\n* Assigning the tag `active_mocker:true` will stub any ActiveRecord model Constants for Mock classes in `it` or `before/after(:each)`. This removes any need for dependency injection. Write tests and code like you would normally.\r\n* To stub any Constants in `before(:all)`, `after(:all)` use `mock_class('ClassName')`.\r\n* Will call `ActiveMocker::LoadedMocks.delete_all` in `after(:all)` block to clean up mock state for other tests.\r\n\r\n---------\r\n    \r\n    Person.column_names\r\n        => [\"id\", \"account_id\", \"first_name\", \"last_name\", \"address\", \"city\"]\r\n\r\n    person = Person.new( first_name:  \"Dustin\", \r\n    \t\t\t\t\t\t\t  last_name:   \"Zeisler\", \r\n    \t\t\t\t\t\t\t  account:      Account.new )\r\n        => \"#<PersonMock id: nil, account_id: nil, first_name: \"Dustin\", last_name: \"Zeisler, address: nil, city: nil>\"\r\n\r\n     person.first_name\r\n        => \"Dustin\"\r\n\r\n### When schema.rb changes, the mock fails\r\n(After `rake db:migrate` is called the mocks will be regenerated.)\r\n \r\n\t#db/schema.rb\r\n\r\n     ActiveRecord::Schema.define(version: 20140327205359) do\r\n\r\n       create_table \"people\", force: true do |t|\r\n         t.integer  \"account_id\"\r\n         t.string   \"f_name\",        limit: 128\r\n         t.string   \"l_name\",        limit: 128\r\n         t.string   \"address\",       limit: 200\r\n         t.string   \"city\",          limit: 100\r\n       end\r\n\r\n     end\r\n\r\n--------------\r\n\r\n     Person.new(first_name: \"Dustin\", last_name: \"Zeisler\")\r\n             =>#<UnknownAttributeError unknown attribute: first_name >\r\n\r\n## Mocking Methods\r\n\r\n\r\n### Class Methods\r\n\r\n     Person.bar('baz')\r\n        => RuntimeError: ::bar is not Implemented for Class: PersonMock\r\n\r\n     # Rspec 3 Mocks\r\n     \r\n     RSpec.configure do |config|\r\n       config.mock_framework = :rspec\r\n       config.mock_with :rspec do |mocks|\r\n         mocks.verify_doubled_constant_names = true\r\n         mocks.verify_partial_doubles = true\r\n       end\r\n     end\r\n     \r\n     allow(Person).to receive(:bar) do  |name, type=nil|\r\n        \"Now implemented with #{name} and #{type}\"\r\n     end\r\n\r\n     Person.bar('foo', 'type')\r\n       => \"Now implemented with foo and type\"\r\n       \r\n     # Rspec 3 mock class method\r\n     allow_any_instance_of(Person).to receive(:bar) do\r\n        \"Now implemented\"\r\n     end\r\n\r\n\r\n#### When the model changes, the mock fails\r\n(Requires a regeneration of the mocks files.)\r\n\r\n    #app/models/person.rb\r\n\r\n    class Person < ActiveRecord::Base\r\n      belongs_to :account\r\n\r\n      def bar(name)\r\n        puts name\r\n      end\r\n\r\n    end\r\n   \r\n--------------\r\n\r\n    Person.new.bar('foo', 'type')\r\n      => ArgumentError: wrong number of arguments (2 for 1)\r\n\r\n----------------\r\n\r\n    #app/models/person.rb\r\n\r\n    class Person < ActiveRecord::Base\r\n      belongs_to :account\r\n\r\n      def foo(name, type=nil)\r\n        puts name\r\n      end\r\n\r\n    end\r\n    \r\n--------------\r\n\r\n    # Rspec 3 Mocks\r\n    allow(person).to receive(:bar) do  |name, type=nil|\r\n      \"Now implemented with #{name} and #{type}\"\r\n    end\r\n      => NoMethodError: undefined method `bar' for class `PersonMock'\r\n      \r\n### Constants and Modules are Available.\r\n\r\n* Any locally defined modules will not be included or extended.\r\n\r\n---------------\r\n\r\n    class Person < ActiveRecord::Base\r\n       CONSTANT_VALUE = 13\r\n    end\r\n\r\n-----------------------\r\n\r\n    PersonMock::CONSTANT_VALUE\r\n    \t=> 13\r\n\r\n\r\n### Scoped Methods \r\n* As long the mock file that holds the scope method is required it will be available but raise an `unimplemented error` when called.\r\n\r\n### Managing Mocks  \r\n\r\nDeletes All Records for Loaded Mocks - (Useful in after(:each) to clean up state between examples)\r\n    \r\n    ActiveMocker::LoadedMocks.delete_all\r\n\r\n### ActiveRecord supported methods\r\n\r\nSee [Documentation](http://rdoc.info/github/zeisler/active_mocker/master/ActiveMocker) for a complete list of methods and usage.\r\n\r\n**class methods**\r\n\r\n  * new\r\n  * create/create!\r\n  * column_names/attribute_names\r\n  * delete_all/destroy_all\r\n  \r\n**Query Methods**\r\n\r\n  * all\r\n  * find\r\n  * find_by/find_by!\r\n  * find_or_create_by\r\n  * find_or_initialize_by\r\n  * where(conditions_hash)\r\n  * where(key: array_of_values)\r\n  * where.not(conditions_hash)\r\n  * delete_all/destroy_all\r\n  * delete_all(conditions_hash)\r\n  * destroy(id)/delete(id)\r\n  * update_all\r\n  * update(id, attributes)\r\n  * count\r\n  * uniq\r\n  * first/last\r\n  * average(:field_name)\r\n  * minimum(:field_name)\r\n  * maximum(:field_name)\r\n  * sum(:field_name)\r\n  * order(:field_name)\r\n  * reverse_order\r\n  * limit\r\n  \r\n**Relation Methods**\r\n  * concat\r\n  * include\r\n  * push\r\n  * clear\r\n  * take\r\n  * empty?\r\n  * replace\r\n  * any?\r\n  * many?\r\n\r\n**instance methods**\r\n  \r\n  * attributes\r\n  * update\r\n  * save/save!\r\n  * write_attribute/read_attribute - (protected, can be used within modules)\r\n  * delete\r\n  * new_record?\r\n  * persisted?\r\n  * reload\r\n  * attribute_names\r\n  * attribute_present?\r\n  * has_attribute?\r\n\r\n**has_one/belongs_to/has_many**\r\n\r\n  * build_< association >\r\n  * create_< association >\r\n  * create_< association >!\r\n  * < association >.create\r\n  * < association >.build\r\n  \r\n\r\n### Schema/Migration Option Support\r\n* All schema types are supported and coerced by [Virtus](https://github.com/solnic/virtus). If coercion fails the passed value will be retained.\r\n* Default value is supported.\r\n* Scale and Precision are not supported.\r\n\r\n### Known Limitations\r\n* Model names and table names must follow the default ActiveRecord naming pattern.\r\n* Whatever associations are setup in one mock object will not be reflected in any other objects. \r\n    * There's partial support for it to work more like ActiveRecord in v1.6 when `ActiveMocker::Mock.config.experimental = true` is set. When v1.7 comes out these features will be moved out of experimantal.\r\n\r\n* Validation/Callbacks are not present in mocks. A Work around is putting the method into a module with required ActiveSupport/ActiveModel dependencies and make sure the code is supported by the mock. \r\n* Sql queries, joins, etc will never be supported.\r\n\r\n## Inspiration\r\nThanks to Jeff Olfert for being my original inspiration for this project.\r\n\r\n## Contributing\r\nYour contribution are welcome!\r\n\r\n1. Fork it ( http://github.com/zeisler/active_mocker/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}